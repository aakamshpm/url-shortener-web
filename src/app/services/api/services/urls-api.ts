/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { urlControllerCreateShortUrl } from '../fn/urls/url-controller-create-short-url';
import { UrlControllerCreateShortUrl$Params } from '../fn/urls/url-controller-create-short-url';
import { urlControllerDeleteUrl } from '../fn/urls/url-controller-delete-url';
import { UrlControllerDeleteUrl$Params } from '../fn/urls/url-controller-delete-url';
import { urlControllerGetUrlStats } from '../fn/urls/url-controller-get-url-stats';
import { UrlControllerGetUrlStats$Params } from '../fn/urls/url-controller-get-url-stats';
import { UrlResponseDto } from '../models/url-response-dto';
import { UrlStatsDto } from '../models/url-stats-dto';

@Injectable({ providedIn: 'root' })
export class UrlsApi extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `urlControllerCreateShortUrl()` */
  static readonly UrlControllerCreateShortUrlPath = '/api/urls/shorten';

  /**
   * Shorten a URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `urlControllerCreateShortUrl()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  urlControllerCreateShortUrl$Response(params: UrlControllerCreateShortUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlResponseDto>> {
    return urlControllerCreateShortUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Shorten a URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `urlControllerCreateShortUrl$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  urlControllerCreateShortUrl(params: UrlControllerCreateShortUrl$Params, context?: HttpContext): Observable<UrlResponseDto> {
    return this.urlControllerCreateShortUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlResponseDto>): UrlResponseDto => r.body)
    );
  }

  /** Path part for operation `urlControllerGetUrlStats()` */
  static readonly UrlControllerGetUrlStatsPath = '/api/urls/stats/{shortCode}';

  /**
   * Get statistics for a short URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `urlControllerGetUrlStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  urlControllerGetUrlStats$Response(params: UrlControllerGetUrlStats$Params, context?: HttpContext): Observable<StrictHttpResponse<UrlStatsDto>> {
    return urlControllerGetUrlStats(this.http, this.rootUrl, params, context);
  }

  /**
   * Get statistics for a short URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `urlControllerGetUrlStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  urlControllerGetUrlStats(params: UrlControllerGetUrlStats$Params, context?: HttpContext): Observable<UrlStatsDto> {
    return this.urlControllerGetUrlStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<UrlStatsDto>): UrlStatsDto => r.body)
    );
  }

  /** Path part for operation `urlControllerDeleteUrl()` */
  static readonly UrlControllerDeleteUrlPath = '/api/urls/delete/{shortCode}';

  /**
   * Delete a short URL.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `urlControllerDeleteUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  urlControllerDeleteUrl$Response(params: UrlControllerDeleteUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return urlControllerDeleteUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a short URL.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `urlControllerDeleteUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  urlControllerDeleteUrl(params: UrlControllerDeleteUrl$Params, context?: HttpContext): Observable<void> {
    return this.urlControllerDeleteUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
